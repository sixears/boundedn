{-# LANGUAGE DataKinds                  #-}
{-# LANGUAGE DeriveGeneric              #-}
{-# LANGUAGE FlexibleContexts           #-}
{-# LANGUAGE FlexibleInstances          #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE InstanceSigs               #-}
{-# LANGUAGE LambdaCase                 #-}
{-# LANGUAGE KindSignatures             #-}
{-# LANGUAGE MultiParamTypeClasses      #-}
{-# LANGUAGE NoStarIsType               #-}
{-# LANGUAGE OverloadedStrings          #-}
{-# LANGUAGE PatternSynonyms            #-}
{-# LANGUAGE QuasiQuotes                #-}
{-# LANGUAGE TemplateHaskell            #-}
{-# LANGUAGE TypeApplications           #-}
{-# LANGUAGE TypeOperators              #-}
{-# LANGUAGE UnicodeSyntax              #-}
{-# LANGUAGE ViewPatterns               #-}

module BoundedN
  ( -- don't export the constructor, so clients can't create out-of-range values
    BoundedN, ùïé, pattern ùïé, pattern ùïé', pattern W, pattern W'
  , checkBoundedN, checkBoundedN', ùï®
  , divModulo, divModuloProxy, divModuloP, divM, divMP
  , add, (‚®π), subtract, sub, (‚®∫), multiply, mult, (‚®ª)
  , modulo, moduloN, moduloProxy, moduloP, moduloProxyN, moduloPN

  , tests
  )
where

import Prelude  ( Bounded, Enum( pred, succ ), Integer, Integral( toInteger )
                , Num
                , (-), (*)
                , div, enumFrom, enumFromThen, enumFromThenTo, enumFromTo, error
                , fromEnum, fromInteger, fromIntegral, maxBound, minBound
                , toEnum, toInteger
                )

-- base --------------------------------

import Control.Exception  ( Exception )
import Control.Monad      ( return )
import Data.Bifunctor     ( bimap )
import Data.Bool          ( not, otherwise )
import Data.Either        ( Either( Right ), either )
import Data.Eq            ( Eq )
import Data.Function      ( ($), const, flip, id )
import Data.Maybe         ( Maybe( Just, Nothing ) )
import Data.Ord           ( Ord, (<) )
import Data.Proxy         ( Proxy( Proxy ) )
import Data.String        ( String )
import Data.Typeable      ( Typeable )
import GHC.Generics       ( Generic )
import GHC.TypeNats       ( KnownNat, Nat, type(+), type(*), natVal )
import System.Exit        ( ExitCode )
import System.IO          ( IO )
import Text.Read          ( Read )
import Text.Show          ( Show( show ) )

-- base-unicode-symbols ----------------

import Data.Bool.Unicode        ( (‚àß) )
import Data.Eq.Unicode          ( (‚â°) )
import Data.Function.Unicode    ( (‚àò) )
import Data.Monoid.Unicode      ( (‚äï) )
import Data.Ord.Unicode         ( (‚â§), (‚â•) )
import Numeric.Natural.Unicode  ( ‚Ñï )

-- deepseq -----------------------------

import Control.DeepSeq  ( NFData )

-- finite-typelits ---------------------

import qualified  Data.Finite
import Data.Finite  ( Finite, finite, getFinite, packFinite )

-- genvalidity -------------------------

import Data.GenValidity  ( GenValid( genValid, shrinkValid ) )

-- lens --------------------------------

import Control.Lens.Prism   ( Prism' )
import Control.Lens.Review  ( (#) )

-- mtl ---------------------------------

import Control.Monad.Except  ( MonadError, throwError )

-- more-unicode ------------------------

import Data.MoreUnicode.Functor  ( (‚ä≥), (‚©∫) )
import Data.MoreUnicode.Tasty    ( (‚âü) )

-- number ------------------------------

import Number  ( FromI( fromI, fromI', __fromI, __fromI' )
               , ToNum( toNum ) )

-- QuickCheck --------------------------

import Test.QuickCheck        ( Gen, Property, property )
import Test.QuickCheck.Arbitrary
                              ( Arbitrary( arbitrary ), arbitraryBoundedEnum )

-- tasty -------------------------------

import Test.Tasty  ( TestTree, testGroup )

-- tasty-hunit -------------------------

import Test.Tasty.HUnit  ( assertBool, testCase )

-- tasty-plus --------------------------

import TastyPlus  ( assertAnyException, runTestsP, runTestsReplay, runTestTree )

-- tasty-quickcheck --------------------

import Test.Tasty.QuickCheck  ( testProperty )

-- template-haskell --------------------

import Language.Haskell.TH         ( Exp( AppE, ConE, LitE ), ExpQ
                                   , Lit( IntegerL ) )
import Language.Haskell.TH.Syntax  ( Lift( lift ) )

-- tfmt --------------------------------

import Text.Fmt  ( fmt )

-- validity ----------------------------

import Data.Validity  ( Validation, Validity( validate ), check )

--------------------------------------------------------------------------------

__bang__ ‚à∑ Show Œµ ‚áí Either Œµ Œ± ‚Üí Œ±
__bang__ = either (error ‚àò show) id

maxOf ‚à∑ Bounded Œ± ‚áí Œ± ‚Üí Œ±
maxOf = const maxBound

newtype BoundedN (ŒΩ ‚à∑ Nat) = BoundedN { toFinite ‚à∑ Finite ŒΩ }
  deriving (Bounded,Enum,Eq,Generic,NFData,Ord,Read,Show)

type ùïé = BoundedN

----------------------------------------

instance KnownNat ŒΩ ‚áí Validity (BoundedN ŒΩ) where
  validate ‚à∑ BoundedN ŒΩ ‚Üí Validation
  validate b = let m = toNum @_ @Integer $ maxOf b
                   i = toNum b
                   checkMsg = [fmt|value %d does not exceed upper bound %d|] i m
                in check (i ‚â§ m) checkMsg
                 ‚äï check (i ‚â• 0) ([fmt|value %d is non-negative|] i)

instance KnownNat ŒΩ ‚áí GenValid (BoundedN ŒΩ) where
  genValid ‚à∑ Gen (BoundedN ŒΩ)
  genValid = arbitrary
  shrinkValid ‚à∑ BoundedN ŒΩ ‚Üí [BoundedN ŒΩ]
  -- try all the lower-numbered values
  shrinkValid (ùïé 0) = []
  shrinkValid (ùïé n) = enumFromTo (ùïé 0) (ùïé (n-1))
  shrinkValid  _     = error "shrinkValid failed to pattern-match on ùïé"

instance KnownNat ŒΩ ‚áí Lift (BoundedN ŒΩ) where
  lift ‚à∑ BoundedN ŒΩ ‚Üí ExpQ
  -- Œª> runQ [|  W 7 |]
  -- AppE (ConE MInfo.BoundedN.W) (LitE (IntegerL 7))
  lift (BoundedN n) = return $ AppE (ConE 'W) (LitE $ IntegerL (getFinite n))

----------------------------------------

data BoundsError Œ± = InputTooLow  Œ± | InputTooHigh ‚Ñï Œ±
  deriving (Eq,Show)

instance (Typeable Œ±, Show Œ±) ‚áí Exception (BoundsError Œ±)

-- see ProcLib.Process2 / ExecError for another example of a
-- multi-param error class
class AsBoundsError Œ± Œµ where
  _BoundsError ‚à∑ Prism' Œµ (BoundsError Œ±)

instance AsBoundsError Œ± (BoundsError Œ±) where
  _BoundsError = id

inputTooLow ‚à∑ (AsBoundsError Œ± Œµ, MonadError Œµ Œ∑) ‚áí Œ± ‚Üí Œ∑ œá
inputTooLow i = throwError $ _BoundsError # InputTooLow i

inputTooHigh ‚à∑ (AsBoundsError Œ± Œµ, MonadError Œµ Œ∑) ‚áí ‚Ñï ‚Üí Œ± ‚Üí Œ∑ œá
inputTooHigh max i = throwError $ _BoundsError # InputTooHigh max i

-- | Like `inputTooHigh`, but infers the max value from the type of the result.
inputTooHigh' ‚à∑ (KnownNat ŒΩ,AsBoundsError Œ± Œµ,MonadError Œµ Œ∑) ‚áí Œ± ‚Üí Œ∑ (proxy ŒΩ)
inputTooHigh' i = let result = inputTooHigh max i
                      max    = natVal $ fromME result
                   in result


fromME ‚à∑ MonadError œÉ Œº ‚áí Œº Œ≤ ‚Üí Œ≤
fromME = error $ "fromME should never be called (for type inference only)"

checkBoundedN ‚à∑ (KnownNat ŒΩ, Integral Œ±, AsBoundsError Œ± Œµ, MonadError Œµ Œ∑) ‚áí
                Œ± ‚Üí Œ∑ (ùïé ŒΩ)
checkBoundedN i | i < 0 = inputTooLow i
                | otherwise = -- we 'let' the result, to bind a name to the
                              -- return type, so that inputTooHigh' can use it
                              -- to infer the upper bound
                              let result = case fromI i of
                                             Just n  ‚Üí return n
                                             Nothing ‚Üí inputTooHigh' i
                               in result

checkBoundedN' ‚à∑ (KnownNat ŒΩ, Integral Œ±, MonadError (BoundsError Œ±) Œ∑) ‚áí
                 Œ± ‚Üí Œ∑ (ùïé ŒΩ)
checkBoundedN' = checkBoundedN

{- | Convert an Integral to a ùïé, hopefully. -}
toBoundedN ‚à∑ (KnownNat ŒΩ, Integral Œ±) ‚áí Œ± ‚Üí Maybe (ùïé ŒΩ)
-- we can't use the maybe-funnel on here checkBoundedN here, because
-- checkBoundedN uses toBoundedN‚Ä¶
toBoundedN = BoundedN ‚©∫ packFinite ‚àò toInteger

instance KnownNat ŒΩ ‚áí FromI (BoundedN ŒΩ) where
  fromI = toBoundedN

{- | Alias for `toBoundedN`, with Integer to avoid type ambiguity -}
toBoundedN' ‚à∑ KnownNat ŒΩ ‚áí Integer ‚Üí Maybe (ùïé ŒΩ)
toBoundedN' = fromI'

--------------------

{- | Alias for @toBoundedN@, specifying Integer input for ease of literal
     use. -}
ùï® ‚à∑ KnownNat ŒΩ ‚áí Integer ‚Üí Maybe (ùïé ŒΩ)
ùï® = fromI

--------------------

toBoundedNTests ‚à∑ TestTree
toBoundedNTests =
  testGroup "toBoundedN"
            [ testCase "toBoundedN 5" $ Just (ùïé @6 5) ‚âü toBoundedN' 5
            , testCase "toBoundedN 7" $ (Nothing ‚à∑ Maybe (ùïé 6)) ‚âü ùï® 7
            , testCase "toBoundedN @6 7" $ Nothing      ‚âü toBoundedN' @6 7
            , testCase "toBoundedN @8 7" $ Just (ùïé 7) ‚âü toBoundedN' @8 7
            ]

----------------------------------------

{- | *PARTIAL* Convert an Integral to a ùïé' (or bust). -}
__toBoundedN ‚à∑ (KnownNat ŒΩ, Integral Œ±, Show Œ±) ‚áí Œ± ‚Üí ùïé ŒΩ
__toBoundedN = __bang__ ‚àò checkBoundedN'

{- | Alias for `__toBoundedN`, with Integer to avoid type ambiguity.
    *PARTIAL* Convert an Integral to a ùïé' (or bust). -}
__toBoundedN' ‚à∑ KnownNat ŒΩ ‚áí Integer ‚Üí ùïé ŒΩ
__toBoundedN' = __toBoundedN

__toBoundedNTests ‚à∑ TestTree
__toBoundedNTests =
  testGroup "__toBoundedN"
            [ testCase "__toBoundedN 5" $ (ùïé @6 5 ‚à∑ ùïé 6) ‚âü __toBoundedN' @6 5
            , testCase "__toBoundedN 7" $
                assertAnyException "__toBoundedN 7" $ __toBoundedN' @6 7
            ]

----------------------------------------

{- | Pattern to (de)construct a BoundedN (A.K.A., ùïé') from any integral value.
     *BEWARE* that the constructor is *PARTIAL* - you can, for example, write
     ùïé' @3 (-1), and it will compile (but will diverge under evaluation).
 -}
pattern ùïé ‚à∑ KnownNat ŒΩ ‚áí Integer ‚Üí ùïé ŒΩ
pattern ùïé i ‚Üê ((getFinite ‚àò toFinite) ‚Üí i)
              where ùïé i = __fromI' i

{- | Non-unicode alias for ùïé -}
pattern W ‚à∑ KnownNat ŒΩ ‚áí Integer ‚Üí ùïé ŒΩ
pattern W i ‚Üê ((getFinite ‚àò toFinite) ‚Üí i)
              where W i = __fromI' i

{- | Alias for ùïé, for any @Integral@. -}
pattern ùïé' ‚à∑ (KnownNat ŒΩ, Integral Œ±, Show Œ±) ‚áí Œ± ‚Üí ùïé ŒΩ
pattern ùïé' i ‚Üê ((fromInteger ‚àò getFinite ‚àò toFinite) ‚Üí i)
              where ùïé' i = __fromI i

{- | Non-unicode alias for ùïé' -}
pattern W' ‚à∑ (KnownNat ŒΩ, Integral Œ±, Show Œ±) ‚áí Œ± ‚Üí ùïé ŒΩ
pattern W' i ‚Üê ((fromInteger ‚àò getFinite ‚àò toFinite) ‚Üí i)
              where W' i = __fromI i

instance KnownNat ŒΩ ‚áí ToNum (BoundedN ŒΩ) where
  toNum ‚à∑ Num Œ± ‚áí ùïé ŒΩ ‚Üí Œ±
  toNum (ùïé i) = fromInteger $ toInteger i
  toNum _      = error "failed to convert BoundedN to num"

--------------------

ùï®Tests ‚à∑ TestTree
ùï®Tests =
  let five  = ùïé @7 5
      seven = ùïé @7 7
   in testGroup "ùïé'"
                [ testCase "five"  $ 5 ‚âü (\ case (ùïé x) ‚Üí x; _ ‚Üí -1) five
                , testCase "seven" $
                  assertAnyException "seven" $ (\ case (ùïé x) ‚Üí x; _ ‚Üí 1) seven
                , testCase "five" $ five ‚âü ùïé 5
                , testCase "seven" $ assertAnyException "seven" $ ùïé @7 7
                , testCase "-1" $ assertAnyException "-1" $ ùïé @3 (-1)
                ]

instance KnownNat ŒΩ ‚áí Arbitrary (BoundedN ŒΩ) where
  arbitrary ‚à∑ Gen (BoundedN ŒΩ)
  arbitrary = BoundedN ‚ä≥ arbitraryBoundedEnum

arbitraryTests ‚à∑ TestTree
arbitraryTests =
  let propBounded ‚à∑ KnownNat ŒΩ ‚áí BoundedN ŒΩ ‚Üí Property
      propBounded n = property $ n ‚â• ùïé 0 ‚àß n ‚â§ maxBound
   in testGroup "Arbitrary"
                [ testProperty "properlyBounded" (propBounded @137) ]

-- testing ---------------------------------------------------------------------

boundedTests ‚à∑ TestTree
boundedTests =
  testGroup "Bounded"
    [ testCase "minBound" $ ùïé 0 ‚âü minBound @(ùïé 7)
    , testCase "maxBound" $ ùïé 6 ‚âü maxBound @(ùïé 7)
    ]

----------------------------------------

enumTests ‚à∑ TestTree
enumTests =
  let assertFail ‚à∑ String ‚Üí ùïé 7 ‚Üí TestTree
      assertFail n v = testCase n $ assertAnyException n v
   in testGroup "Enum"
        [ testCase   "succ 5"   $ ùïé 6 ‚âü succ (ùïé @7 5)
        , testCase   "pred 5"   $ ùïé 4 ‚âü pred (ùïé @7 5)
        , assertFail "pred 0"   (pred $ ùïé 0)
        , assertFail "succ 6"   (succ $ ùïé 6)
        , testCase   "toEnum 4" $ (ùïé @7 4) ‚âü toEnum 4
        , assertFail "toEnum 7" (toEnum $ 7)
        , testCase   "fromEnum 4" $ 4 ‚âü (fromEnum (ùïé @7 4))
        , testCase   "enumFrom 4" $
            [ùïé 4, ùïé 5, ùïé 6] ‚âü enumFrom (ùïé @7 4)
        , testCase   "enumFromThen 1 3" $
            [ùïé 1, ùïé 3, ùïé 5] ‚âü enumFromThen (ùïé @7 1) (ùïé 3)
        , testCase   "enumFromTo 1 4" $
            [ùïé 1, ùïé 2, ùïé 3, ùïé 4] ‚âü enumFromTo (ùïé @7 1) (ùïé 4)

        , testCase   "enumFromThenTo 8 5 0" $
              [ùïé 8, ùïé 5, ùïé 2]
            ‚âü enumFromThenTo (ùïé @9 8) (ùïé 5) (ùïé 0)
        ]

----------------------------------------

eqTests ‚à∑ TestTree
eqTests =
  testGroup "Eq" [ testCase "2==2" $ ùïé 2 ‚âü (ùïé @9 2)
                 , testCase "2/=3" $ assertBool "2/=3" (not $ ùïé 2 ‚â° ùïé @7 3)
                 ]

----------------------------------------

{- | `Prelude.mod`, returning a BoundedN (and type implied by). -}
modulo ‚à∑ (KnownNat ŒΩ, Integral Œ±) ‚áí Œ± ‚Üí ùïé ŒΩ
modulo i = BoundedN $ Data.Finite.modulo (toInteger i)

{- | `modulo` using `ToNum` rather that `Integral`. -}
moduloN ‚à∑ (KnownNat ŒΩ, ToNum Œ±) ‚áí Œ± ‚Üí ùïé ŒΩ
moduloN i = BoundedN $ Data.Finite.modulo (toNum i)

{- | `Prelude.mod`, returning a BoundedN, with a proxy to help with type
     signatures. -}
moduloProxy ‚à∑ (KnownNat ŒΩ, Integral Œ±) ‚áí proxy ŒΩ ‚Üí Œ± ‚Üí ùïé ŒΩ
moduloProxy p i = BoundedN $ Data.Finite.moduloProxy p (toInteger i)

{- | Alias for `moduloProxy`. -}
moduloP ‚à∑ (KnownNat ŒΩ, Integral Œ±) ‚áí proxy ŒΩ ‚Üí Œ± ‚Üí ùïé ŒΩ
moduloP = moduloProxy

{- | `moduloProxy` using `ToNum` rather that `Integral`. -}
moduloProxyN ‚à∑ (KnownNat ŒΩ, ToNum Œ±) ‚áí proxy ŒΩ ‚Üí Œ± ‚Üí ùïé ŒΩ
moduloProxyN p i = BoundedN $ Data.Finite.moduloProxy p (toNum i)

{- | Alias for `moduloPN`. -}
moduloPN ‚à∑ (KnownNat ŒΩ, ToNum Œ±) ‚áí proxy ŒΩ ‚Üí Œ± ‚Üí ùïé ŒΩ
moduloPN = moduloProxyN

------------------------------------------------------------

{- | `Prelude.divMod`, returning a BoundedN (and type implied by). -}
divModulo ‚à∑ (KnownNat ŒΩ, Integral Œ±) ‚áí Œ± ‚Üí (Œ±, ùïé ŒΩ)
divModulo i = let m = BoundedN $ Data.Finite.modulo (toInteger i)
                  n = fromInteger $ toInteger $ natVal m
               in (i `div` n, m)

{- | Alias for `divModulo`. -}
divM ‚à∑ (KnownNat ŒΩ, Integral Œ±) ‚áí Œ± ‚Üí (Œ±, ùïé ŒΩ)
divM = divModulo

{- | `Prelude.divMod`, returning a BoundedN, with a proxy to help with type
     signatures. -}
divModuloProxy ‚à∑ (KnownNat ŒΩ, Integral Œ±) ‚áí proxy ŒΩ ‚Üí Œ± ‚Üí (Œ±, ùïé ŒΩ)
divModuloProxy p i = let m = BoundedN $ Data.Finite.moduloProxy p (toInteger i)
                         n = fromInteger $ toInteger $ natVal m
                      in (i `div` n, m)

{- | Alias for `divModuloProxy`. -}
divModuloP ‚à∑ (KnownNat ŒΩ, Integral Œ±) ‚áí proxy ŒΩ ‚Üí Œ± ‚Üí (Œ±, ùïé ŒΩ)
divModuloP = divModuloProxy

{- | Alias for `divModuloProxy`. -}
divMP ‚à∑ (KnownNat ŒΩ, Integral Œ±) ‚áí proxy ŒΩ ‚Üí Œ± ‚Üí (Œ±, ùïé ŒΩ)
divMP = divModuloProxy

{- | Alias for `divModuloProxy`, with the arguments flipped. -}
(‚®∏) ‚à∑ (KnownNat ŒΩ, Integral Œ±) ‚áí Œ± ‚Üí proxy ŒΩ ‚Üí (Œ±, ùïé ŒΩ)
(‚®∏) = flip divModuloProxy

divModuloTests ‚à∑ TestTree
divModuloTests =
  testGroup "divModulo"
            [ testCase "6 ‚âë 3" $ (2, ùïé 0) ‚âü divModulo @3 (6 ‚à∑ Integer)
            , testCase "7 ‚âë 3" $ (2, ùïé 1) ‚âü divModulo @3 (7 ‚à∑ Integer)
            , testCase "8 ‚âë 3" $ (2, ùïé 2) ‚âü divModulo @3 (8 ‚à∑ Integer)
            , testCase "9 ‚âë 3" $ (3, ùïé 0) ‚âü divModulo @3 (9 ‚à∑ Integer)
            , testCase "8 ‚®∏ 3" $ (2, ùïé 2) ‚âü (8 ‚à∑ Integer) ‚®∏ (Proxy ‚à∑ Proxy 3)
            ]

----------------------------------------

add ‚à∑ BoundedN ŒΩ ‚Üí BoundedN ŒΩ' ‚Üí BoundedN (ŒΩ + ŒΩ')
add (BoundedN m) (BoundedN n) = BoundedN $ Data.Finite.add m n

infixl 6 ‚®π
(‚®π) ‚à∑ BoundedN ŒΩ ‚Üí BoundedN ŒΩ' ‚Üí BoundedN (ŒΩ + ŒΩ')
(‚®π) = add

----------

addTests ‚à∑ TestTree
addTests =
  testGroup "add" [ testCase "6 + 3" $ ùïé @12 9 ‚âü ùïé @8 6 ‚®π ùïé @4 3 ]

----------------------------------------

subtract ‚à∑ BoundedN ŒΩ ‚Üí BoundedN ŒΩ' ‚Üí Either (BoundedN ŒΩ') (BoundedN ŒΩ)
subtract (BoundedN m) (BoundedN n) =
  bimap BoundedN BoundedN $ Data.Finite.sub m n

sub ‚à∑ BoundedN ŒΩ ‚Üí BoundedN ŒΩ' ‚Üí Either (BoundedN ŒΩ') (BoundedN ŒΩ)
sub = subtract

infixl 6 ‚®∫
(‚®∫) ‚à∑ BoundedN ŒΩ ‚Üí BoundedN ŒΩ' ‚Üí Either (BoundedN ŒΩ') (BoundedN ŒΩ)
(‚®∫) = subtract

----------

subTests ‚à∑ TestTree
subTests =
  testGroup "sub" [ testCase "6 - 3" $ Right (ùïé 2) ‚âü ùïé @8 6 ‚®∫ ùïé @5 4 ]

----------------------------------------

multiply ‚à∑ BoundedN ŒΩ ‚Üí BoundedN ŒΩ' ‚Üí BoundedN (ŒΩ * ŒΩ')
multiply (BoundedN m) (BoundedN n) = BoundedN $ Data.Finite.multiply m n

mult ‚à∑ BoundedN ŒΩ ‚Üí BoundedN ŒΩ' ‚Üí BoundedN (ŒΩ * ŒΩ')
mult = multiply

infixl 7 ‚®ª
(‚®ª) ‚à∑ BoundedN ŒΩ ‚Üí BoundedN ŒΩ' ‚Üí BoundedN (ŒΩ * ŒΩ')
(‚®ª) = multiply

----------

multTests ‚à∑ TestTree
multTests =
  testGroup "mult" [ testCase "6 * 3" $ ùïé 24 ‚âü ùïé @8 6 ‚®ª ùïé @5 4
                   , testCase "6 * 3" $ ùïé @35 24 ‚âü ùïé 6 ‚®ª ùïé @5 4
                   ]

----------------------------------------

{- | Multiply a bounded value by a fixed value, which is encoded in the type. -}
product ‚à∑ (KnownNat ŒΩ, KnownNat Œ≥, KnownNat (ŒΩ * Œ≥)) ‚áí
          BoundedN ŒΩ ‚Üí proxy Œ≥ ‚Üí BoundedN (ŒΩ * Œ≥)
product (BoundedN m) n =
  BoundedN $ finite $ (getFinite m) * fromIntegral (natVal n)

{- | Unicode operator for product; note that the half-circle is on the side of
     the proxy type (type-affixed value). -}
(‚®µ) ‚à∑ (KnownNat ŒΩ, KnownNat Œ≥, KnownNat (ŒΩ * Œ≥)) ‚áí
       BoundedN ŒΩ ‚Üí proxy Œ≥ ‚Üí BoundedN (ŒΩ * Œ≥)
(‚®µ) = product

{- | Unicode operator for product; note that the half-circle is on the side of
     the proxy type (type-affixed value). -}
(‚®¥) ‚à∑ (KnownNat ŒΩ, KnownNat Œ≥, KnownNat (ŒΩ * Œ≥)) ‚áí
       proxy Œ≥ ‚Üí BoundedN ŒΩ ‚Üí BoundedN (ŒΩ * Œ≥)
(‚®¥) = flip product

productTests ‚à∑ TestTree
productTests =
  testGroup "product" [ testCase "3 *: 5" $ ùïé @20 15 ‚âü ùïé @4 3 `product` ùïé @5 0
                      , testCase "3 *: 4" $ ùïé 12 ‚âü ùïé @4 3 ‚®µ ùïé @4 0
                      , testCase "3 *: 6" $ ùïé @24 18 ‚âü ùïé @4 3 ‚®µ Proxy
                      , testCase "4 *: 6" $ ùïé 24 ‚âü (Proxy @6) ‚®¥ ùïé @5 4
                      ]

------------------------------------------------------------

tests ‚à∑ TestTree
tests = testGroup "BoundedN" [ boundedTests, enumTests, eqTests, arbitraryTests
                             , toBoundedNTests, __toBoundedNTests, ùï®Tests
                             , divModuloTests, addTests, subTests, multTests
                             , productTests
                             ]

----------------------------------------

_test ‚à∑ IO ExitCode
_test = runTestTree tests

--------------------

_tests ‚à∑ String ‚Üí IO ExitCode
_tests = runTestsP tests

_testr ‚à∑ String ‚Üí ‚Ñï ‚Üí IO ExitCode
_testr = runTestsReplay tests

-- that's all, folks! ----------------------------------------------------------
